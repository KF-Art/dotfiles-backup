#!/bin/sh

# Directories and filenames
XDEB_PKGROOT="$(realpath "${XDEB_PKGROOT-${PWD}}")"
XDEB_WORKDIR="${XDEB_PKGROOT}/workdir"
XDEB_DESTDIR="${XDEB_PKGROOT}/destdir"
XDEB_DATADIR="${XDEB_PKGROOT}/datadir"
XDEB_BINPKGS="${XDEB_PKGROOT}/binpkgs"
XDEB_SHLIBS="${XDEB_PKGROOT}/shlibs"

# Options
XDEB_OPT_DEPS="${XDEB_OPT_DEPS-false}"
XDEB_OPT_SYNC="${XDEB_OPT_SYNC-false}"
XDEB_OPT_QUIT="${XDEB_OPT_QUIT-false}"
XDEB_OPT_EXTRACT="${XDEB_OPT_EXTRACT-true}"
XDEB_OPT_CLEAN_DIR="${XDEB_OPT_CLEAN_DIR-false}"
XDEB_OPT_FIX_CONFLICT="${XDEB_OPT_FIX_CONFLICT-false}"
XDEB_OPT_WARN_CONFLICT="${XDEB_OPT_WARN_CONFLICT-true}"
XDEB_SUFFIX=""

alias pkgrep="grep -Po -m1"

log_info() {
	echo "\033[1;36mI\033[0m ${*}\033[0m"
}

log_warn() {
	echo "\033[1;33mW\033[0m ${*}\033[0m"
}

log_crit() {
	echo "\033[1;31mE\033[0;1m ${*}\033[0m"
}

# clean : Removes old package data, without removing any binpkgs
clean() {
	rm -f "${XDEB_BINPKGS}"/.xbps-pkg-*

	rm -rf "${XDEB_WORKDIR}"
	rm -rf "${XDEB_DATADIR}"
	rm -rf "${XDEB_DESTDIR}"
}

# clean_repodata : Removes the repodata file. Needed to rebuild a package with the same version
clean_repodata() {
	rm -rf "${XDEB_BINPKGS}"/*-repodata
}

# clean_all : Remove everything, this script created
clean_all() {
	clean
	clean_repodata
	rm -rf "${XDEB_BINPKGS}"
	rm -rf "${XDEB_SHLIBS}"
}

genrdeps() {
	find "${XDEB_DESTDIR}" -type f | while read -r f; do
		[ "$(head -c 4 "${f}")" = "$(printf "\177ELF")" ] || continue
		objdump -p "${f}" | grep NEEDED | awk '{print $2}'
	done | sort -u | while read -r lib; do
		# Ignore libraries provided by current package
		[ -n "$(find "${XDEB_DESTDIR}" -name "${lib}")" ] && continue

		_lib=$(echo "${lib}" | sed -E 's|\+|\\+|g')
		rdep="$(grep -E -m1 "^${_lib}[[:blank:]]+.*$" "${XDEB_SHLIBS}" | cut -d ' ' -f2)"

		[ -z "${rdep}" ] && {
			log_warn "Unable to find dependency for ${lib}" >&2
			continue
		}

		echo "${rdep%-*}${XDEB_SUFFIX}>=${rdep##*-}"
	done | sort -u | tr '\n' ' '
}

# If 2 arguments, move $1 to $2/$1
# if 3 arguments, move $1 to $2/$3
fix_conflict() {
	[ ! -e "${XDEB_DESTDIR}/${1}" ] || [ ! -d "${XDEB_DESTDIR}/${1}" ] && return 1

	src="${1}"
	dst="${2}/${3-"${1}"}"
	mkdir -p "${XDEB_DESTDIR}/${2}"
	mv "${XDEB_DESTDIR}/${src}" "${XDEB_DESTDIR}/${dst}";
	log_info "Moved conflict '${src}' -> '${dst}'"

	return 0
}

check_command() {
	command -v "$1" > /dev/null 2>&1 && return 0

	log_warn "Dependency '${1}' not found"
	exit 1
}

usage() {
	cat << EOF
usage: xdeb [-S] [-d] [-Sd] [--deps] ... FILE
  -d                         # Automatic dependencies
  -S                         # Sync runtime dependency file
  -c                         # Clean everything except shlibs and binpkgs
  -r                         # Clean repodata (Use when rebuilding a package)
  -q                         # Don't build the package at all
  -C                         # Clean all files
  -b                         # No extract, just build files in destdir
  -e                         # Remove empty directories
  -m                         # Add the -32bit suffix
  -i                         # Ignore file conflicts
  -f                         # Attempt to automatically fix common conflicts
  --deps=...                 # Add manual dependencies
  --arch=...                 # Add an arch for the package to run on
  --revision=... | --rev=... # Set package revision. Alternative to -r
  --help | -h                # Show this page

example:
  xdeb -Cq                   # Remove all files and quit
  xdeb -Sd FILE              # Sync depdendency list and create package
  xdeb --deps='tar>0' FILE   # Add tar as manual dependency and create package
EOF
	exit "${1}"
}

check_command xz # xz
check_command tar # tar
check_command curl # curl

check_command ar # binutils
check_command objdump # binutils

check_command xbps-rindex # xbps
check_command xbps-create # xbps

mkdir -p "${XDEB_PKGROOT}"

while [ "${#}" != "0" ]; do
	case "${1}" in
		--deps|--arch|--revision)
			log_crit "'${1}' invalid. Use ${1}=... instead"; exit 1; continue;;

		--deps=*) XDEB_DEPENDENCIES="${XDEB_DEPENDENCIES}${1#*=} "; shift; continue;;
		--arch=*) archs="${1#*=}"; shift; continue;;
		--revision=*|--rev=*) revision="${1#*=}"; shift; continue;;

		--help) usage 0;;
		--*) log_crit "invalid option '${1}'"; usage 1; exit 1;;
		# Posix getopt stops after first non-option
		-*);;
		*) [ "${#}" = 1 ] && XDEB_BASEPKG="${1}"; break;;
	esac

	flag="${1#?}"
	while [ -n "${flag}" ]; do
		case "${flag}" in
			S*) XDEB_OPT_SYNC=true;;
			d*) XDEB_OPT_DEPS=true;;
			h*) usage 0;;
			c*) clean;;
			C*) clean_all;;
			r*) clean_repodata;;
			q*) XDEB_OPT_QUIT=true;;
			Q*) exit 0;;
			b*) XDEB_OPT_EXTRACT=false;;
			e*) XDEB_OPT_CLEAN_DIR=true;;
			m*) XDEB_SUFFIX="-32bit";;
			i*) XDEB_OPT_WARN_CONFLICT=false;;
			f*) XDEB_OPT_FIX_CONFLICT=true;;
			*) log_crit "invalid option -- '${flag%"${flag#?}"}'"; usage 1;;
		esac

		flag="${flag#?}"
	done

	shift
done

[ "${XDEB_OPT_SYNC}" = true ] && {
	curl \
		-s "https://raw.githubusercontent.com/void-linux/void-packages/master/common/shlibs" \
		-o "${XDEB_SHLIBS}"
	log_info "Synced shlibs"
}

[ "${XDEB_OPT_DEPS}" = true ] && [ ! -r "${XDEB_SHLIBS}" ] && {
	log_crit "Sync atleast once, before using the depencency option"
	exit 1
}

[ "${XDEB_OPT_EXTRACT}" = true ] && {
	# Does the filename end with .deb? Is the file readable?
	echo "${XDEB_BASEPKG}" | grep -q "\.deb$" && [ -r "${XDEB_BASEPKG}" ] || {
		log_crit "Last argument has to point to an existing deb package"
		exit 1
	}

	clean
	mkdir -p "${XDEB_BINPKGS}"
	mkdir -p "${XDEB_DATADIR}"
	mkdir -p "${XDEB_DESTDIR}"
	mkdir -p "${XDEB_WORKDIR}"

	ar -xf "${XDEB_BASEPKG}" --output "${XDEB_WORKDIR}" &&
	tar -xf "${XDEB_WORKDIR}"/control.* -C "${XDEB_DATADIR}" &&
	tar -xf "${XDEB_WORKDIR}"/data.* -C "${XDEB_DESTDIR}" || {
		log_crit "Not a valid deb file"
		exit 1
	}

	log_info "Extracted files"
}

# Quit after parsing every argument argument
[ "${XDEB_OPT_QUIT}" = true ] && {
	log_info "Quitting before building"
	exit 0;
}

# The variable names are the same as in the regular xbps-src package build
pkgname=$(pkgrep "Package:[ \t]*\K.*" "${XDEB_DATADIR}/control")
version=$(pkgrep "Version:[ \t]*\K.*" "${XDEB_DATADIR}/control")
license=$(pkgrep "License:[ \t]*\K.*" "${XDEB_DATADIR}/control")
maintainer=$(pkgrep "Maintainer:[ \t]*\K.*" "${XDEB_DATADIR}/control")
short_desc=$(pkgrep "Description:[ \t]*\K.*" "${XDEB_DATADIR}/control")
long_desc=$(pkgrep -z "Description:[ \t\n]*\K.*" "${XDEB_DATADIR}/control" | tr '\0' '\n')
archs=${archs-$(pkgrep "Architecture:[ \t]*\K.*" "${XDEB_DATADIR}/control")}
revision="${revision-1}"

# It seems that debian packages don't have to provide a short_desc (XMind-ZEN didn't do it)
[ -z "${short_desc}" ] && short_desc="${long_desc}"

version=$(echo "${version}" | grep -Po "^(\d|\.)*")
case "${archs}" in
	amd64) archs="x86_64";;
	arm64) archs="aarch64";;
	armhf) archs="armv7l";;
	i386) archs="i686";;
	all) archs="noarch";;
esac

[ "${XDEB_OPT_DEPS}" = true ] && XDEB_DEPENDENCIES="${XDEB_DEPENDENCIES}$(genrdeps)" 

# Remove trailing space
XDEB_DEPENDENCIES="${XDEB_DEPENDENCIES%* }"
[ -n "${XDEB_DEPENDENCIES}" ] && log_info "Resolved dependencies (${XDEB_DEPENDENCIES})"

[ "${XDEB_OPT_FIX_CONFLICT}" = true ] && {
	fix_conflict bin   usr
	fix_conflict lib   usr
	fix_conflict lib32 usr
	fix_conflict lib64 usr
	fix_conflict sbin  usr
	fix_conflict usr/lib64 usr lib
}

[ "${XDEB_OPT_CLEAN_DIR}" != true ] && [ "${XDEB_OPT_WARN_CONFLICT}" != true ] || {
	command -v xbps-query >/dev/null && ign="$(xbps-query -f "${pkgname}" | sed 's/ -> .*//')"

	find "${XDEB_DESTDIR}" -depth | {
		while read -r f; do
			# Remove empty directories
			[ "${XDEB_OPT_CLEAN_DIR}" = true ] && [ -z "$(ls -A "${f}")" ] && {
				rm -rf "${f}"
				log_info "Removed empty directory ${f}"
				continue
			}

			# Check for conflicts
			[ "${XDEB_OPT_WARN_CONFLICT}" != true ] && continue

			fr="${f#${XDEB_DESTDIR}}"
			[ ! -e "${fr}" ] && continue
			[ ! -L "${fr}" ] && [ -d "${fr}" ] && [ ! -L "${f}" ] && [ -d "${f}" ] && continue

			echo "${ign}" | grep -q -x -F "${fr}" && continue
			log_crit "Conflict: '${f#${PWD}/}'"
			rc=1
		done

		return "${rc-0}"
	} || log_crit "Consider (re)moving file(s) from '${XDEB_DESTDIR}' and run \`xdeb -rb\`"
}

short_binpkgs="${XDEB_BINPKGS#${PWD}/}"

cd "${XDEB_BINPKGS}" || exit

out="${pkgname}${XDEB_SUFFIX}-${version}_${revision}"
xbps-create -q -A "${archs}" -n "${out}" -m "${maintainer}" -s "${short_desc}" -S "${long_desc}" -l "${license}" -D "${XDEB_DEPENDENCIES}" "${XDEB_DESTDIR}"
xbps-rindex -a "${out}.${archs}.xbps"
log_info "Install using \`xbps-install -R ${short_binpkgs} ${out}\`"
